environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'ANSICON': '120x9001 (120x30)', 'ANSICON_DEF': '7', 'APPDATA': 'C:\\Users\\ygg667\\AppData\\Roaming', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'DESKTOP-3EMOC0R', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'GOPATH': 'C:\\Users\\ygg667\\go', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\ygg667', 'JAVA_HOME': 'C:\\Program Files\\Java\\jre1.8.0_102', 'LOCALAPPDATA': 'C:\\Users\\ygg667\\AppData\\Local', 'LOGONSERVER': '\\\\DESKTOP-3EMOC0R', 'NUMBER_OF_PROCESSORS': '4', 'ONEDRIVE': 'C:\\Users\\ygg667\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Go\\bin;C:\\Program Files\\Java\\jre1.8.0_102\\bin;C:\\Program Files\\Java\\jre1.8.0_102\\jre\\bin;C:\\Users\\ygg667\\AppData\\Local\\Programs\\Python\\Python38\\Scripts\\;C:\\Users\\ygg667\\AppData\\Local\\Programs\\Python\\Python38\\;C:\\Users\\ygg667\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\ygg667\\go\\bin', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 154 Stepping 3, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9a03', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '$P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\ygg667\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\ygg667\\AppData\\Local\\Temp', 'USERDOMAIN': 'DESKTOP-3EMOC0R', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-3EMOC0R', 'USERNAME': 'ygg667', 'USERPROFILE': 'C:\\Users\\ygg667', 'WINDIR': 'C:\\Windows'})